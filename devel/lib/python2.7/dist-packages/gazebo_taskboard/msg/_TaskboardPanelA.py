# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gazebo_taskboard/TaskboardPanelA.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TaskboardPanelA(genpy.Message):
  _md5sum = "ee4c1b86056331dd76c8ef8469b7f0fd"
  _type = "gazebo_taskboard/TaskboardPanelA"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string PANEL_POWER_COVER
string PANEL_POWER_SWITCH
string PANEL_POWER_LED
string A01_ROCKER_SWITCH
string A01_ROCKER_LED_TOP
string A01_ROCKER_LED_BOTTOM
string A02_LED_NUM_PAD_A1
string A02_LED_NUM_PAD_A2
string A02_LED_NUM_PAD_A3
string A02_LED_NUM_PAD_B1
string A02_LED_NUM_PAD_B2
string A02_LED_NUM_PAD_B3
string A02_LED_NUM_PAD_C1
string A02_LED_NUM_PAD_C2
string A02_LED_NUM_PAD_C3
string A02_NUM_PAD_A1
string A02_NUM_PAD_A2
string A02_NUM_PAD_A3
string A02_NUM_PAD_B1
string A02_NUM_PAD_B2
string A02_NUM_PAD_B3
string A02_NUM_PAD_C1
string A02_NUM_PAD_C2
string A02_NUM_PAD_C3
string A03_TOGGLE
string A03_LED
string A04_TOGGLE
string A04_LED_TOP
string A04_LED_BOTTOM
string A05_TOGGLE
string A05_LED
"""
  __slots__ = ['PANEL_POWER_COVER','PANEL_POWER_SWITCH','PANEL_POWER_LED','A01_ROCKER_SWITCH','A01_ROCKER_LED_TOP','A01_ROCKER_LED_BOTTOM','A02_LED_NUM_PAD_A1','A02_LED_NUM_PAD_A2','A02_LED_NUM_PAD_A3','A02_LED_NUM_PAD_B1','A02_LED_NUM_PAD_B2','A02_LED_NUM_PAD_B3','A02_LED_NUM_PAD_C1','A02_LED_NUM_PAD_C2','A02_LED_NUM_PAD_C3','A02_NUM_PAD_A1','A02_NUM_PAD_A2','A02_NUM_PAD_A3','A02_NUM_PAD_B1','A02_NUM_PAD_B2','A02_NUM_PAD_B3','A02_NUM_PAD_C1','A02_NUM_PAD_C2','A02_NUM_PAD_C3','A03_TOGGLE','A03_LED','A04_TOGGLE','A04_LED_TOP','A04_LED_BOTTOM','A05_TOGGLE','A05_LED']
  _slot_types = ['string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       PANEL_POWER_COVER,PANEL_POWER_SWITCH,PANEL_POWER_LED,A01_ROCKER_SWITCH,A01_ROCKER_LED_TOP,A01_ROCKER_LED_BOTTOM,A02_LED_NUM_PAD_A1,A02_LED_NUM_PAD_A2,A02_LED_NUM_PAD_A3,A02_LED_NUM_PAD_B1,A02_LED_NUM_PAD_B2,A02_LED_NUM_PAD_B3,A02_LED_NUM_PAD_C1,A02_LED_NUM_PAD_C2,A02_LED_NUM_PAD_C3,A02_NUM_PAD_A1,A02_NUM_PAD_A2,A02_NUM_PAD_A3,A02_NUM_PAD_B1,A02_NUM_PAD_B2,A02_NUM_PAD_B3,A02_NUM_PAD_C1,A02_NUM_PAD_C2,A02_NUM_PAD_C3,A03_TOGGLE,A03_LED,A04_TOGGLE,A04_LED_TOP,A04_LED_BOTTOM,A05_TOGGLE,A05_LED

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TaskboardPanelA, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.PANEL_POWER_COVER is None:
        self.PANEL_POWER_COVER = ''
      if self.PANEL_POWER_SWITCH is None:
        self.PANEL_POWER_SWITCH = ''
      if self.PANEL_POWER_LED is None:
        self.PANEL_POWER_LED = ''
      if self.A01_ROCKER_SWITCH is None:
        self.A01_ROCKER_SWITCH = ''
      if self.A01_ROCKER_LED_TOP is None:
        self.A01_ROCKER_LED_TOP = ''
      if self.A01_ROCKER_LED_BOTTOM is None:
        self.A01_ROCKER_LED_BOTTOM = ''
      if self.A02_LED_NUM_PAD_A1 is None:
        self.A02_LED_NUM_PAD_A1 = ''
      if self.A02_LED_NUM_PAD_A2 is None:
        self.A02_LED_NUM_PAD_A2 = ''
      if self.A02_LED_NUM_PAD_A3 is None:
        self.A02_LED_NUM_PAD_A3 = ''
      if self.A02_LED_NUM_PAD_B1 is None:
        self.A02_LED_NUM_PAD_B1 = ''
      if self.A02_LED_NUM_PAD_B2 is None:
        self.A02_LED_NUM_PAD_B2 = ''
      if self.A02_LED_NUM_PAD_B3 is None:
        self.A02_LED_NUM_PAD_B3 = ''
      if self.A02_LED_NUM_PAD_C1 is None:
        self.A02_LED_NUM_PAD_C1 = ''
      if self.A02_LED_NUM_PAD_C2 is None:
        self.A02_LED_NUM_PAD_C2 = ''
      if self.A02_LED_NUM_PAD_C3 is None:
        self.A02_LED_NUM_PAD_C3 = ''
      if self.A02_NUM_PAD_A1 is None:
        self.A02_NUM_PAD_A1 = ''
      if self.A02_NUM_PAD_A2 is None:
        self.A02_NUM_PAD_A2 = ''
      if self.A02_NUM_PAD_A3 is None:
        self.A02_NUM_PAD_A3 = ''
      if self.A02_NUM_PAD_B1 is None:
        self.A02_NUM_PAD_B1 = ''
      if self.A02_NUM_PAD_B2 is None:
        self.A02_NUM_PAD_B2 = ''
      if self.A02_NUM_PAD_B3 is None:
        self.A02_NUM_PAD_B3 = ''
      if self.A02_NUM_PAD_C1 is None:
        self.A02_NUM_PAD_C1 = ''
      if self.A02_NUM_PAD_C2 is None:
        self.A02_NUM_PAD_C2 = ''
      if self.A02_NUM_PAD_C3 is None:
        self.A02_NUM_PAD_C3 = ''
      if self.A03_TOGGLE is None:
        self.A03_TOGGLE = ''
      if self.A03_LED is None:
        self.A03_LED = ''
      if self.A04_TOGGLE is None:
        self.A04_TOGGLE = ''
      if self.A04_LED_TOP is None:
        self.A04_LED_TOP = ''
      if self.A04_LED_BOTTOM is None:
        self.A04_LED_BOTTOM = ''
      if self.A05_TOGGLE is None:
        self.A05_TOGGLE = ''
      if self.A05_LED is None:
        self.A05_LED = ''
    else:
      self.PANEL_POWER_COVER = ''
      self.PANEL_POWER_SWITCH = ''
      self.PANEL_POWER_LED = ''
      self.A01_ROCKER_SWITCH = ''
      self.A01_ROCKER_LED_TOP = ''
      self.A01_ROCKER_LED_BOTTOM = ''
      self.A02_LED_NUM_PAD_A1 = ''
      self.A02_LED_NUM_PAD_A2 = ''
      self.A02_LED_NUM_PAD_A3 = ''
      self.A02_LED_NUM_PAD_B1 = ''
      self.A02_LED_NUM_PAD_B2 = ''
      self.A02_LED_NUM_PAD_B3 = ''
      self.A02_LED_NUM_PAD_C1 = ''
      self.A02_LED_NUM_PAD_C2 = ''
      self.A02_LED_NUM_PAD_C3 = ''
      self.A02_NUM_PAD_A1 = ''
      self.A02_NUM_PAD_A2 = ''
      self.A02_NUM_PAD_A3 = ''
      self.A02_NUM_PAD_B1 = ''
      self.A02_NUM_PAD_B2 = ''
      self.A02_NUM_PAD_B3 = ''
      self.A02_NUM_PAD_C1 = ''
      self.A02_NUM_PAD_C2 = ''
      self.A02_NUM_PAD_C3 = ''
      self.A03_TOGGLE = ''
      self.A03_LED = ''
      self.A04_TOGGLE = ''
      self.A04_LED_TOP = ''
      self.A04_LED_BOTTOM = ''
      self.A05_TOGGLE = ''
      self.A05_LED = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.PANEL_POWER_COVER
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.PANEL_POWER_SWITCH
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.PANEL_POWER_LED
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A01_ROCKER_SWITCH
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A01_ROCKER_LED_TOP
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A01_ROCKER_LED_BOTTOM
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_A1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_A2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_A3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_B1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_B2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_B3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_C1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_C2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_C3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_A1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_A2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_A3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_B1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_B2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_B3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_C1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_C2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_C3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A03_TOGGLE
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A03_LED
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A04_TOGGLE
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A04_LED_TOP
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A04_LED_BOTTOM
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A05_TOGGLE
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A05_LED
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.PANEL_POWER_COVER = str[start:end].decode('utf-8')
      else:
        self.PANEL_POWER_COVER = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.PANEL_POWER_SWITCH = str[start:end].decode('utf-8')
      else:
        self.PANEL_POWER_SWITCH = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.PANEL_POWER_LED = str[start:end].decode('utf-8')
      else:
        self.PANEL_POWER_LED = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A01_ROCKER_SWITCH = str[start:end].decode('utf-8')
      else:
        self.A01_ROCKER_SWITCH = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A01_ROCKER_LED_TOP = str[start:end].decode('utf-8')
      else:
        self.A01_ROCKER_LED_TOP = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A01_ROCKER_LED_BOTTOM = str[start:end].decode('utf-8')
      else:
        self.A01_ROCKER_LED_BOTTOM = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_A1 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_A1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_A2 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_A2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_A3 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_A3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_B1 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_B1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_B2 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_B2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_B3 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_B3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_C1 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_C1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_C2 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_C2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_C3 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_C3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_A1 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_A1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_A2 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_A2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_A3 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_A3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_B1 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_B1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_B2 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_B2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_B3 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_B3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_C1 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_C1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_C2 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_C2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_C3 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_C3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A03_TOGGLE = str[start:end].decode('utf-8')
      else:
        self.A03_TOGGLE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A03_LED = str[start:end].decode('utf-8')
      else:
        self.A03_LED = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A04_TOGGLE = str[start:end].decode('utf-8')
      else:
        self.A04_TOGGLE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A04_LED_TOP = str[start:end].decode('utf-8')
      else:
        self.A04_LED_TOP = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A04_LED_BOTTOM = str[start:end].decode('utf-8')
      else:
        self.A04_LED_BOTTOM = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A05_TOGGLE = str[start:end].decode('utf-8')
      else:
        self.A05_TOGGLE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A05_LED = str[start:end].decode('utf-8')
      else:
        self.A05_LED = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.PANEL_POWER_COVER
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.PANEL_POWER_SWITCH
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.PANEL_POWER_LED
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A01_ROCKER_SWITCH
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A01_ROCKER_LED_TOP
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A01_ROCKER_LED_BOTTOM
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_A1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_A2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_A3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_B1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_B2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_B3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_C1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_C2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_LED_NUM_PAD_C3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_A1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_A2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_A3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_B1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_B2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_B3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_C1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_C2
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A02_NUM_PAD_C3
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A03_TOGGLE
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A03_LED
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A04_TOGGLE
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A04_LED_TOP
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A04_LED_BOTTOM
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A05_TOGGLE
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.A05_LED
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.PANEL_POWER_COVER = str[start:end].decode('utf-8')
      else:
        self.PANEL_POWER_COVER = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.PANEL_POWER_SWITCH = str[start:end].decode('utf-8')
      else:
        self.PANEL_POWER_SWITCH = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.PANEL_POWER_LED = str[start:end].decode('utf-8')
      else:
        self.PANEL_POWER_LED = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A01_ROCKER_SWITCH = str[start:end].decode('utf-8')
      else:
        self.A01_ROCKER_SWITCH = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A01_ROCKER_LED_TOP = str[start:end].decode('utf-8')
      else:
        self.A01_ROCKER_LED_TOP = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A01_ROCKER_LED_BOTTOM = str[start:end].decode('utf-8')
      else:
        self.A01_ROCKER_LED_BOTTOM = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_A1 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_A1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_A2 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_A2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_A3 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_A3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_B1 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_B1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_B2 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_B2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_B3 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_B3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_C1 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_C1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_C2 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_C2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_LED_NUM_PAD_C3 = str[start:end].decode('utf-8')
      else:
        self.A02_LED_NUM_PAD_C3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_A1 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_A1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_A2 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_A2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_A3 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_A3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_B1 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_B1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_B2 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_B2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_B3 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_B3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_C1 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_C1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_C2 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_C2 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A02_NUM_PAD_C3 = str[start:end].decode('utf-8')
      else:
        self.A02_NUM_PAD_C3 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A03_TOGGLE = str[start:end].decode('utf-8')
      else:
        self.A03_TOGGLE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A03_LED = str[start:end].decode('utf-8')
      else:
        self.A03_LED = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A04_TOGGLE = str[start:end].decode('utf-8')
      else:
        self.A04_TOGGLE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A04_LED_TOP = str[start:end].decode('utf-8')
      else:
        self.A04_LED_TOP = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A04_LED_BOTTOM = str[start:end].decode('utf-8')
      else:
        self.A04_LED_BOTTOM = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A05_TOGGLE = str[start:end].decode('utf-8')
      else:
        self.A05_TOGGLE = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.A05_LED = str[start:end].decode('utf-8')
      else:
        self.A05_LED = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
