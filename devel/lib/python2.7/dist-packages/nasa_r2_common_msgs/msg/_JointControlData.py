# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from nasa_r2_common_msgs/JointControlData.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import nasa_r2_common_msgs.msg

class JointControlData(genpy.Message):
  _md5sum = "fedf678b0c3640f2a0cd4265c858b481"
  _type = "nasa_r2_common_msgs/JointControlData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """JointControlMode            controlMode
JointControlCommandMode     commandMode
JointControlCalibrationMode calibrationMode
JointControlClearFaultMode  clearFaultMode
JointControlCoeffState      coeffState

================================================================================
MSG: nasa_r2_common_msgs/JointControlMode
uint8 state
uint8 IGNORE     = 0
uint8 INVALID    = 1
uint8 BOOTLOADER = 2
uint8 FAULTED    = 3
uint8 SAFE       = 4
uint8 OFF        = 5
uint8 PARK       = 6
uint8 NEUTRAL    = 7
uint8 DRIVE      = 8

================================================================================
MSG: nasa_r2_common_msgs/JointControlCommandMode
uint8 state
uint8 IGNORE          = 0
uint8 INVALID         = 1
uint8 MOTCOM          = 2
uint8 MULTILOOPSTEP   = 3
uint8 MULTILOOPSMOOTH = 4
uint8 ACTUATOR        = 5
uint8 STALLMODE       = 6

================================================================================
MSG: nasa_r2_common_msgs/JointControlCalibrationMode
uint8 state
uint8 IGNORE       = 0
uint8 DISABLE      = 1
uint8 ENABLE       = 2
uint8 UNCALIBRATED = 3

================================================================================
MSG: nasa_r2_common_msgs/JointControlClearFaultMode
uint8 state
uint8 IGNORE  = 0
uint8 DISABLE = 1
uint8 ENABLE  = 2

================================================================================
MSG: nasa_r2_common_msgs/JointControlCoeffState
uint8 state
uint8 NOTLOADED = 0
uint8 LOADED    = 1
"""
  __slots__ = ['controlMode','commandMode','calibrationMode','clearFaultMode','coeffState']
  _slot_types = ['nasa_r2_common_msgs/JointControlMode','nasa_r2_common_msgs/JointControlCommandMode','nasa_r2_common_msgs/JointControlCalibrationMode','nasa_r2_common_msgs/JointControlClearFaultMode','nasa_r2_common_msgs/JointControlCoeffState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       controlMode,commandMode,calibrationMode,clearFaultMode,coeffState

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JointControlData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.controlMode is None:
        self.controlMode = nasa_r2_common_msgs.msg.JointControlMode()
      if self.commandMode is None:
        self.commandMode = nasa_r2_common_msgs.msg.JointControlCommandMode()
      if self.calibrationMode is None:
        self.calibrationMode = nasa_r2_common_msgs.msg.JointControlCalibrationMode()
      if self.clearFaultMode is None:
        self.clearFaultMode = nasa_r2_common_msgs.msg.JointControlClearFaultMode()
      if self.coeffState is None:
        self.coeffState = nasa_r2_common_msgs.msg.JointControlCoeffState()
    else:
      self.controlMode = nasa_r2_common_msgs.msg.JointControlMode()
      self.commandMode = nasa_r2_common_msgs.msg.JointControlCommandMode()
      self.calibrationMode = nasa_r2_common_msgs.msg.JointControlCalibrationMode()
      self.clearFaultMode = nasa_r2_common_msgs.msg.JointControlClearFaultMode()
      self.coeffState = nasa_r2_common_msgs.msg.JointControlCoeffState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.controlMode.state, _x.commandMode.state, _x.calibrationMode.state, _x.clearFaultMode.state, _x.coeffState.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.controlMode is None:
        self.controlMode = nasa_r2_common_msgs.msg.JointControlMode()
      if self.commandMode is None:
        self.commandMode = nasa_r2_common_msgs.msg.JointControlCommandMode()
      if self.calibrationMode is None:
        self.calibrationMode = nasa_r2_common_msgs.msg.JointControlCalibrationMode()
      if self.clearFaultMode is None:
        self.clearFaultMode = nasa_r2_common_msgs.msg.JointControlClearFaultMode()
      if self.coeffState is None:
        self.coeffState = nasa_r2_common_msgs.msg.JointControlCoeffState()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.controlMode.state, _x.commandMode.state, _x.calibrationMode.state, _x.clearFaultMode.state, _x.coeffState.state,) = _struct_5B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_5B.pack(_x.controlMode.state, _x.commandMode.state, _x.calibrationMode.state, _x.clearFaultMode.state, _x.coeffState.state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.controlMode is None:
        self.controlMode = nasa_r2_common_msgs.msg.JointControlMode()
      if self.commandMode is None:
        self.commandMode = nasa_r2_common_msgs.msg.JointControlCommandMode()
      if self.calibrationMode is None:
        self.calibrationMode = nasa_r2_common_msgs.msg.JointControlCalibrationMode()
      if self.clearFaultMode is None:
        self.clearFaultMode = nasa_r2_common_msgs.msg.JointControlClearFaultMode()
      if self.coeffState is None:
        self.coeffState = nasa_r2_common_msgs.msg.JointControlCoeffState()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.controlMode.state, _x.commandMode.state, _x.calibrationMode.state, _x.clearFaultMode.state, _x.coeffState.state,) = _struct_5B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5B = struct.Struct("<5B")
