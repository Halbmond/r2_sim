// Generated by gencpp from file nasa_r2_common_msgs/PoseTrajectoryReplan.msg
// DO NOT EDIT!


#ifndef NASA_R2_COMMON_MSGS_MESSAGE_POSETRAJECTORYREPLAN_H
#define NASA_R2_COMMON_MSGS_MESSAGE_POSETRAJECTORYREPLAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nasa_r2_common_msgs/ReplanType.h>
#include <nasa_r2_common_msgs/PoseTrajectory.h>

namespace nasa_r2_common_msgs
{
template <class ContainerAllocator>
struct PoseTrajectoryReplan_
{
  typedef PoseTrajectoryReplan_<ContainerAllocator> Type;

  PoseTrajectoryReplan_()
    : header()
    , replan()
    , trajectory()  {
    }
  PoseTrajectoryReplan_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , replan(_alloc)
    , trajectory(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator>  _replan_type;
  _replan_type replan;

   typedef  ::nasa_r2_common_msgs::PoseTrajectory_<ContainerAllocator>  _trajectory_type;
  _trajectory_type trajectory;




  typedef boost::shared_ptr< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> const> ConstPtr;

}; // struct PoseTrajectoryReplan_

typedef ::nasa_r2_common_msgs::PoseTrajectoryReplan_<std::allocator<void> > PoseTrajectoryReplan;

typedef boost::shared_ptr< ::nasa_r2_common_msgs::PoseTrajectoryReplan > PoseTrajectoryReplanPtr;
typedef boost::shared_ptr< ::nasa_r2_common_msgs::PoseTrajectoryReplan const> PoseTrajectoryReplanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nasa_r2_common_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/indigo/share/trajectory_msgs/cmake/../msg'], 'nasa_r2_common_msgs': ['/home/vincent/Project/r2_sim/src/deprecated_nasa_r2_common/nasa_r2_common_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/indigo/share/visualization_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c451df74f58d0f7ac206299290fa0f9";
  }

  static const char* value(const ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c451df74f58d0f7ULL;
  static const uint64_t static_value2 = 0xac206299290fa0f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nasa_r2_common_msgs/PoseTrajectoryReplan";
  }

  static const char* value(const ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
ReplanType replan\n\
PoseTrajectory trajectory\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: nasa_r2_common_msgs/ReplanType\n\
uint8 type\n\
\n\
uint8 NONE = 0\n\
uint8 SOFT = 1\n\
uint8 HARD = 2\n\
uint8 STOP = 3\n\
uint8 PAUSE = 4\n\
uint8 CONTINUE = 5\n\
\n\
================================================================================\n\
MSG: nasa_r2_common_msgs/PoseTrajectory\n\
Header header\n\
# length of nodes must match length of poses in each point\n\
string[] nodes\n\
# priorities must have nodes length or be omitted which defaults all to HIGH\n\
PriorityArray[]  node_priorities\n\
# refFrames must either have one item or be nodes length\n\
string[] refFrames\n\
PoseTrajectoryPoint[] points\n\
\n\
\n\
================================================================================\n\
MSG: nasa_r2_common_msgs/PriorityArray\n\
# axis_priorities must be 0, 1, or 6 elements\n\
# empty defaults to high, 1 sets all axes equal priority, 6 sets each axis (x, y, z, r, p, y)\n\
uint8[]  axis_priorities\n\
\n\
uint8 IGNORE          = 0   # Exclude from trajectory\n\
uint8 CRITICAL        = 1   # Most important priority in trajectory\n\
uint8 HIGH            = 2   # Second most important priority in trajectory\n\
uint8 MEDIUM          = 3   # Medium prioirty in trajectory\n\
uint8 LOW             = 4   # Low priority in trajectory\n\
uint8 OPT             = 5   # Optimize trajectory (solve for, but do not iterate to achieve)\n\
\n\
#uint8 IGNORE = 0\n\
#uint8 LOW = 1\n\
#uint8 MEDIUM = 128\n\
#uint8 HIGH = 254\n\
#uint8 CRITICAL = 255\n\
\n\
================================================================================\n\
MSG: nasa_r2_common_msgs/PoseTrajectoryPoint\n\
# currently, position only but could add velocity and acceleration later\n\
geometry_msgs/Pose[] positions\n\
geometry_msgs/Twist[] velocities\n\
geometry_msgs/Twist[] accelerations\n\
duration time_from_start\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.replan);
      stream.next(m.trajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseTrajectoryReplan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nasa_r2_common_msgs::PoseTrajectoryReplan_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "replan: ";
    s << std::endl;
    Printer< ::nasa_r2_common_msgs::ReplanType_<ContainerAllocator> >::stream(s, indent + "  ", v.replan);
    s << indent << "trajectory: ";
    s << std::endl;
    Printer< ::nasa_r2_common_msgs::PoseTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NASA_R2_COMMON_MSGS_MESSAGE_POSETRAJECTORYREPLAN_H
